<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
		default-autowire="byName" default-lazy-init="false">
		<!-- common configuration -->
		<!-- 加载properties文件 单个文件
		<context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.properties" />
		 -->	
		<bean id="propertyPlaceholderConfigurer" 
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath*:/application.properties</value>
				</list>
			</property>
		</bean>
		
		<!-- BoneCP configuration-->
		<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		   <property name="driverClass" value="${jdbc.driver}" />
		   <property name="jdbcUrl" value="${jdbc.url}" />
		   <property name="username" value="${jdbc.username}"/>
		   <property name="password" value="${jdbc.password}"/>
		   <property name="idleMaxAgeInMinutes" value="4"/>
		   <property name="maxConnectionsPerPartition" value="30"/>
		   <property name="minConnectionsPerPartition" value="5"/>
		   <property name="partitionCount" value="3"/>
		   <property name="acquireIncrement" value="5"/>
		   <property name="statementsCacheSize" value="100"/>
		</bean>
		
		<!-- 配置SessionFactory -->
		<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="hibernateProperties">
				<props>
					<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
					<prop key="hibernate.hbm2ddl.auto">none</prop>
					<prop key="hibernate.show_sql">true</prop>
					<prop key="hibernate.format_sql">true</prop>
					<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
					<prop key="hibernate.cache.query_cache_factory">true</prop>
					<prop key="hibernate.cache.use_second_level_cache">true</prop>
				</props>
			</property>
			<!-- 自动扫描实体类 -->
			<property name="packagesToScan" value="com.auth.model"/>
		</bean>
		<!-- 注解式事务 -->
		<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		    <property name="sessionFactory" ref="sessionFactory"/>
		</bean>
		<!-- 注解式DI (组件注入，非controller)-->
		<context:component-scan base-package="com.auth">
			<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
			<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		</context:component-scan>
		<!-- 使用annotation定义事务 -->
		<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
		
		<!-- HibernateInterceptor -->
		<bean id="hibernateInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor">
        	<property name="sessionFactory">
        		<ref bean="sessionFactory"/>
			</property>
    	</bean>
		
		<!-- TX proxy Manager template -->
		<bean id="txProxyTemplate" abstract="true" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		    <property name="transactionManager" ref="transactionManager"/>
		    <property name="transactionAttributes">
		        <props>
		            <prop key="save*">PROPAGATION_REQUIRED</prop>
		            <prop key="remove*">PROPAGATION_REQUIRED</prop>
		            <prop key="update*">PROPAGATION_REQUIRED</prop>                
		            <prop key="create*">PROPAGATION_REQUIRED</prop>   
		            <prop key="fin*">PROPAGATION_NEVER</prop>   
		            <prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
		            <!-- 
		            	PROPAGATION_REQUIRED-支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
						PROPAGATION_SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行。 
						PROPAGATION_MANDATORY-支持当前事务，如果当前没有事务，就抛出异常。 
						PROPAGATION_REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起。 
						PROPAGATION_NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
						PROPAGATION_NEVER-以非事务方式执行，如果当前存在事务，则抛出异常。 
						PROPAGATION_NESTED-如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
						当前所有的事务都使用“PROPAGATION_REQUIRED”属性值，并且控制事务的操作权限为只读，以保证查询时不会更新数据。根据上述 定义 “PROPAGATION_REQUIRED”属性会造成为所有的操作都创建事务，从而会出现JPA的日志中查询时也会进行更新操作的现象，也就造成了效 率的低下。将所有查询的操作改成事务类型为“PROPAGATION_NEVER”（不使用事务），则查询效率立即提升，但是此时担心一个问题：比如在一 个saveXXX()的方法中，如果方法内部使用更新、查询、再更新的操作流程，会不会造成调用查询时，由于上述配置造成的抛出异常。 
						
						另外，如果出现 
						
						〈prop key="myMethod"〉PROPAGATION_REQUIRED,readOnly,-Exception〈/prop〉 
						这样的配置，其中: 
						
						-Exception表示有Exception抛出时,事务回滚. -代表回滚+就代表提交 
						
						readonly 就是read only, 设置操作权限为只读,一般用于查询的方法,优化作用.
						
						（适用于处理一个或多个交叉insert,update,delete）
						PROPAGATION_SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行。
						
						（适用于处理一个或多个交叉insert,update,delete，query） 
						PROPAGATION_MANDATORY-支持当前事务，如果当前没有事务，就抛出异常。
						
						（适用于检测query是否存在insert,update,delete）  
						PROPAGATION_REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起。 
						PROPAGATION_NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
						PROPAGATION_NEVER-以非事务方式执行，如果当前存在事务，则抛出异常。
						
						（适用于全query） 
						PROPAGATION_NESTED-如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
		             -->
		        </props>
		    </property>
		    <property name="preInterceptors">
		        <list>
		         	<ref bean="hibernateInterceptor"/>
		        </list>
		    </property>                        
		</bean>
    	
		<!-- quartz cluster-->
		<import resource="applicationContext-shiro.xml" />
</beans>